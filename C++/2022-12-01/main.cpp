#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <algorithm>
#include <string.h>
#include <map>
//#include "stdio.h"

#define AA_AUDIO_TABLE(table,a,b,_1,_2,_3,_4,_5) table[std::make_pair<int, AA_AUDIOEVENT_e>((int)a, (AA_AUDIOEVENT_e)b)] = {(int)_1,(int)_2,(int)_3,(int)_4,(int)_5};

#define CONFIG_RELEASE_NATIVE_GUIDANCE_AT_START_VOICESESSION
// #define CONFIG_RELEASE_NATIVE_GUIDANCE_AT_START_CALL
// #define CONFIG_ALLOW_NAVI_GUIDANCE_DURING_CALL

using namespace std;

char mAs[50];
char enu[50];
char sig[50];
char uso[6];
char stp[50];
char cls[50];

bool enu_bool = false;

#define SIGSENDAUDIOFOCUSSTATE(a, b) snprintf(sig, sizeof(sig), "%-50s", #a); snprintf(uso, sizeof(uso), "%-6s", b?"true":"false");
#define SETAUDIOFOCUSSTATE(f)		 snprintf(stp, sizeof(stp), "%-50s", #f); setAudioFocusState(f);
#define CLEARAUDIOFOCUSSTATE(f)      snprintf(cls, sizeof(cls), "%-50s", #f); clearAudioFocusState(f);
#define CASE(a)  case a: snprintf(enu, sizeof(enu), "%-50s", #a); enu_bool = true;
#define CASE2(a) case a: snprintf(mAs, sizeof(mAs), "%-50s", #a);
#define BREAK break
#define RESET() \
snprintf(mAs, sizeof(mAs), "%-50s", "NA"); \
snprintf(enu, sizeof(enu), "%-50s", "NA"); \
snprintf(sig, sizeof(sig), "%-50s", "NA"); \
snprintf(uso, sizeof(uso), "%-6s",  "NA"); \
snprintf(stp, sizeof(stp), "%-50s", "NA"); \
snprintf(cls, sizeof(cls), "%-50s", "NA"); \
enu_bool = false;

// ENUM VALUE
typedef enum AA_AUDIOEVENT_e
{
    eAA_AUDIOEVENT_GAIN,
    eAA_AUDIOEVENT_GAIN_TRANSIENT,
    eAA_AUDIOEVENT_GAIN_TRANSIENT_MAY_DUCK,
    eAA_AUDIOEVENT_RELEASE,
    eAA_AUDIOEVENT_VOICESESSION_START,
    eAA_AUDIOEVENT_VOICESESSION_END,
    eAA_AUDIOEVENT_CALL_ON,
    eAA_AUDIOEVENT_CALL_OFF,
    eAA_AUDIOEVENT_DISCONNECTED,
    eAA_AUDIOEVENT_NATIVE_TRANSIENT_ON,
    eAA_AUDIOEVENT_NATIVE_TRANSIENT_OFF,
    eAA_AUDIOEVENT_NATIVE_TRANSIENT_MAY_DUCK_ON,
    eAA_AUDIOEVENT_NATIVE_TRANSIENT_MAY_DUCK_OFF,
    eAA_AUDIOEVENT_NATIVE_GAIN,
    eAA_AUDIOEVENT_MEDIA_ON,
    eAA_AUDIOEVENT_MEDIA_OFF,
    eAA_AUDIOEVENT_GUIDANCE_ON,
    eAA_AUDIOEVENT_GUIDANCE_OFF,
    eAA_AUDIOEVENT_UI_ON,
    eAA_AUDIOEVENT_UI_OFF
} AA_AUDIOEVENT_e;

typedef enum AA_AUDIOFOCUSSTATE_e {
    eAA_AUDIOFOCUSSTATE_INVALID = 0,
    eAA_AUDIOFOCUSSTATE_GAIN = 1,
    eAA_AUDIOFOCUSSTATE_GAIN_TRANSIENT = 2,
    eAA_AUDIOFOCUSSTATE_LOSS = 3,
    eAA_AUDIOFOCUSSTATE_LOSS_TRANSIENT_CAN_DUCK = 4,
    eAA_AUDIOFOCUSSTATE_LOSS_TRANSIENT = 5,
    eAA_AUDIOFOCUSSTATE_GAIN_MEDIA_ONLY = 6,
    eAA_AUDIOFOCUSSTATE_GAIN_TRANSIENT_GUIDANCE_ONLY = 7
} AA_AUDIOFOCUSSTATE_e;

enum eAudioFocusState{
    eAS_NONE = 0x0
    ,eAS_GAIN = 0x1<<16
    ,eAS_GAIN_TRANSIENT = 0x1<<17
    ,eAS_GAIN_TRANSIENT_MAY_DUCK = 0x1<<18
    ,eAS_GAIN_RELEASE = 0x1<<19

    ,eAS_AUDIOFOCUS_REQUEST = 0xFFF<<16

    ,eAS_VR = 0x1<<28
    ,eAS_CALL = 0x1<<29
    ,eAS_NATIVE_TRANSIENT = 0x01<<30
    ,eAS_NATIVE_TRANSIENT_MAY_DUCK = 0x01<<31

    ,eAS_AUDIOFOCUS_ETC = 0xF<<28

    ,eAS_AUDIOFOCUS = 0xFFFF<<16
};
enum eAudioStreamState{
    eAS_STREAM_NONE = 0x0,
    eAS_MEDIA = 0x1,
    eAS_MEDIA_GUIDANCE = 0x1<<1,
    eAS_MEDIA_GUIDANCE_UI = 0x1<<2,
    eAS_MEDIA_UI = 0x1<<3,
    eAS_MEDIA_UI_GUIDANCE = 0x1<<4,
    eAS_GUIDANCE = 0x1<<5,
    eAS_GUIDANCE_MEDIA = 0x1<<6,
    eAS_GUIDANCE_MEDIA_UI = 0x1<<7,
    eAS_GUIDANCE_UI = 0x1<<8,
    eAS_GUIDANCE_UI_MEDIA = 0x1<<9,
    eAS_UI = 0x1<<10,
    eAS_UI_GUIDANCE = 0x1<<11,
    eAS_UI_GUIANACE_MEDIA = 0x1<<12,
    eAS_UI_MEDIA = 0x1<<13,
    eAS_UI_MEDIA_GUIDANCE = 0x1<<14,

    eAS_AUDIO_STREAM = 0xFFFF
};
// END ENUM VALUE

int mAudioFocusState = eAS_NONE;
int mAudioStreamState = eAS_STREAM_NONE;

void sigSendAudioFocusState(AA_AUDIOFOCUSSTATE_e,bool)
{	
	return;
}


void setAudioFocusState(int flag)
{
    mAudioFocusState |= flag;
}

void clearAudioFocusState(int flag)
{
    mAudioFocusState &= (~flag);
}

void changeAudioFocus(AA_AUDIOEVENT_e event)
{
    bool isGainRelease = 0;
    if (eAS_GAIN_RELEASE != mAudioFocusState)
    {
        if (eAS_GAIN_RELEASE & mAudioFocusState)
        {
            isGainRelease = 1;
            mAudioFocusState &= !eAS_GAIN_RELEASE; printf("---LINE---   --- %3d ---\n", __LINE__);
        }
    }

    switch(mAudioFocusState)
    {
    CASE2(eAS_NONE)
    	printf("---LINE---   --- %3d ---\n", __LINE__);
        switch(event)
        {
        CASE(eAA_AUDIOEVENT_GAIN)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_GAIN, false);
            SETAUDIOFOCUSSTATE(eAS_GAIN);
            // clear
            BREAK;
        CASE(eAA_AUDIOEVENT_GAIN_TRANSIENT)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_GAIN_TRANSIENT, false);
            SETAUDIOFOCUSSTATE(eAS_GAIN_TRANSIENT);
            BREAK;
        CASE(eAA_AUDIOEVENT_GAIN_TRANSIENT_MAY_DUCK)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_GAIN_TRANSIENT_GUIDANCE_ONLY, false);
            SETAUDIOFOCUSSTATE(eAS_GAIN_TRANSIENT_MAY_DUCK);
            BREAK;
        CASE(eAA_AUDIOEVENT_VOICESESSION_START)
            SETAUDIOFOCUSSTATE(eAS_VR);
            BREAK;
        CASE(eAA_AUDIOEVENT_CALL_ON)
            SETAUDIOFOCUSSTATE(eAS_CALL);
            BREAK;
        CASE(eAA_AUDIOEVENT_DISCONNECTED)
            BREAK;
        CASE(eAA_AUDIOEVENT_NATIVE_TRANSIENT_ON)
            SETAUDIOFOCUSSTATE(eAS_NATIVE_TRANSIENT);
            BREAK;
        CASE(eAA_AUDIOEVENT_NATIVE_TRANSIENT_MAY_DUCK_ON)
            SETAUDIOFOCUSSTATE(eAS_NATIVE_TRANSIENT_MAY_DUCK);
            BREAK;
        CASE(eAA_AUDIOEVENT_RELEASE)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS, false);
            BREAK;
        default: 
            // printAudioState(event);
            BREAK;
        }
        BREAK;
    CASE2(eAS_NATIVE_TRANSIENT)
        switch(event)
        {
        CASE(eAA_AUDIOEVENT_GAIN)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS, false);
            BREAK;
        CASE(eAA_AUDIOEVENT_GAIN_TRANSIENT)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS, false);
            BREAK;
        CASE(eAA_AUDIOEVENT_GAIN_TRANSIENT_MAY_DUCK)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS, false);
            BREAK;
        CASE(eAA_AUDIOEVENT_VOICESESSION_START)
            SETAUDIOFOCUSSTATE(eAS_VR);
            BREAK;
        CASE(eAA_AUDIOEVENT_CALL_ON)
            SETAUDIOFOCUSSTATE(eAS_CALL);
            BREAK;
        CASE(eAA_AUDIOEVENT_NATIVE_TRANSIENT_OFF)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS, true);
            CLEARAUDIOFOCUSSTATE(eAS_NATIVE_TRANSIENT);
            BREAK;
        default: 
            BREAK;
        }
        BREAK;
    CASE2(eAS_NATIVE_TRANSIENT_MAY_DUCK)
        switch(event)
        {
        CASE(eAA_AUDIOEVENT_GAIN)
            //It's a workaround. If HU gives LOSS_TRANSIENT_CAN_DUCK, AA media is played in the MD when native guidance is off.
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_GAIN, false);
            //SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS_TRANSIENT_CAN_DUCK, false);
            SETAUDIOFOCUSSTATE(eAS_GAIN);
            BREAK;
        CASE(eAA_AUDIOEVENT_GAIN_TRANSIENT)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS, false);
            BREAK;
        CASE(eAA_AUDIOEVENT_GAIN_TRANSIENT_MAY_DUCK)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS, false);
            BREAK;
        CASE(eAA_AUDIOEVENT_VOICESESSION_START)
#ifdef CONFIG_RELEASE_NATIVE_GUIDANCE_AT_START_VOICESESSION
            CLEARAUDIOFOCUSSTATE(eAS_NATIVE_TRANSIENT_MAY_DUCK);
#endif
            SETAUDIOFOCUSSTATE(eAS_VR);
            BREAK;
        CASE(eAA_AUDIOEVENT_CALL_ON)
#ifdef CONFIG_RELEASE_NATIVE_GUIDANCE_AT_START_CALL
            CLEARAUDIOFOCUSSTATE(eAS_NATIVE_TRANSIENT_MAY_DUCK);
#endif
            SETAUDIOFOCUSSTATE(eAS_CALL);
            BREAK;
        CASE(eAA_AUDIOEVENT_NATIVE_TRANSIENT_MAY_DUCK_OFF)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS, true);
            CLEARAUDIOFOCUSSTATE(eAS_NATIVE_TRANSIENT_MAY_DUCK);
            BREAK;
        default: 
            BREAK;
        }
        BREAK;
    CASE2(eAS_GAIN)
        switch(event)
        {
        CASE(eAA_AUDIOEVENT_RELEASE)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS, false);
            CLEARAUDIOFOCUSSTATE(eAS_GAIN);
            SETAUDIOFOCUSSTATE(eAS_GAIN_RELEASE);
            BREAK;
        CASE(eAA_AUDIOEVENT_VOICESESSION_START)
            SETAUDIOFOCUSSTATE(eAS_VR);
            BREAK;
        CASE(eAA_AUDIOEVENT_CALL_ON)
#ifdef CONFIG_ALLOW_NAVI_GUIDANCE_DURING_CALL
#else
        	SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS_TRANSIENT, true);
#endif
        	
            SETAUDIOFOCUSSTATE(eAS_CALL);
            BREAK;
        CASE(eAA_AUDIOEVENT_DISCONNECTED)
            CLEARAUDIOFOCUSSTATE(eAS_GAIN);
            BREAK;
        CASE(eAA_AUDIOEVENT_NATIVE_TRANSIENT_ON)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS_TRANSIENT, true);
            SETAUDIOFOCUSSTATE(eAS_NATIVE_TRANSIENT);
            BREAK;
        CASE(eAA_AUDIOEVENT_NATIVE_TRANSIENT_MAY_DUCK_ON)
            // Workaround
            // description ) GAIN -> Media play and pause -> Native navi guidance on -> LOSS_TRANSIENT_CAN_DUCK -> Media play -> Native navi guidance off -> GAIN => AA media doesn't output even audio state is playing.
            // so, if media is paused then do not send LOSS_TRANSIENT_CAN_DUCK
            if(mAudioStreamState != eAS_STREAM_NONE)
            {
                SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS_TRANSIENT_CAN_DUCK, true);
            }
            SETAUDIOFOCUSSTATE(eAS_NATIVE_TRANSIENT_MAY_DUCK);
            BREAK;
        CASE(eAA_AUDIOEVENT_NATIVE_GAIN)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS, true);
            CLEARAUDIOFOCUSSTATE(eAS_GAIN);
            BREAK;
        default: 
            // printAudioState(event);
            BREAK;
        }
        BREAK;
    CASE2(eAS_GAIN|eAS_NATIVE_TRANSIENT)
        switch(event)
        {
        CASE(eAA_AUDIOEVENT_GAIN)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS_TRANSIENT, false);
            BREAK;
        CASE(eAA_AUDIOEVENT_GAIN_TRANSIENT)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS_TRANSIENT, false);
            BREAK;
        CASE(eAA_AUDIOEVENT_GAIN_TRANSIENT_MAY_DUCK)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS_TRANSIENT, false);
            BREAK;
        CASE(eAA_AUDIOEVENT_VOICESESSION_START)
            SETAUDIOFOCUSSTATE(eAS_VR);
            BREAK;
        CASE(eAA_AUDIOEVENT_CALL_ON)
            SETAUDIOFOCUSSTATE(eAS_CALL);
            BREAK;
        CASE(eAA_AUDIOEVENT_DISCONNECTED)
            CLEARAUDIOFOCUSSTATE(eAS_GAIN);
            BREAK;
        CASE(eAA_AUDIOEVENT_NATIVE_TRANSIENT_OFF)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_GAIN, true);
            CLEARAUDIOFOCUSSTATE(eAS_NATIVE_TRANSIENT);
            BREAK;
        CASE(eAA_AUDIOEVENT_NATIVE_GAIN)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS, true);
            CLEARAUDIOFOCUSSTATE(eAS_GAIN);
            BREAK;
        default: 
            BREAK;
        }
        BREAK;
    CASE2(eAS_GAIN|eAS_NATIVE_TRANSIENT_MAY_DUCK)
        switch(event)
        {
        CASE(eAA_AUDIOEVENT_VOICESESSION_START)
#ifdef CONFIG_RELEASE_NATIVE_GUIDANCE_AT_START_VOICESESSION
            CLEARAUDIOFOCUSSTATE(eAS_NATIVE_TRANSIENT_MAY_DUCK);
#endif
            SETAUDIOFOCUSSTATE(eAS_VR);
            BREAK;
        CASE(eAA_AUDIOEVENT_CALL_ON)
#ifdef CONFIG_ALLOW_NAVI_GUIDANCE_DURING_CALL
#else
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS_TRANSIENT, true);
#endif
#ifdef CONFIG_RELEASE_NATIVE_GUIDANCE_AT_START_CALL
            CLEARAUDIOFOCUSSTATE(eAS_NATIVE_TRANSIENT_MAY_DUCK);
#endif
            SETAUDIOFOCUSSTATE(eAS_CALL);
            BREAK;
        CASE(eAA_AUDIOEVENT_DISCONNECTED)
            CLEARAUDIOFOCUSSTATE(eAS_GAIN);
            BREAK;
        CASE(eAA_AUDIOEVENT_NATIVE_TRANSIENT_MAY_DUCK_OFF)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_GAIN, true);
            CLEARAUDIOFOCUSSTATE(eAS_NATIVE_TRANSIENT_MAY_DUCK);
            BREAK;
        CASE(eAA_AUDIOEVENT_NATIVE_GAIN)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS, true);
            CLEARAUDIOFOCUSSTATE(eAS_GAIN);
            BREAK;
        default: 
            BREAK;
        }
        BREAK;
    CASE2(eAS_GAIN_RELEASE)
        switch(event)
        {
        CASE(eAA_AUDIOEVENT_GAIN)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_GAIN, false);
            CLEARAUDIOFOCUSSTATE(eAS_GAIN_RELEASE);
            SETAUDIOFOCUSSTATE(eAS_GAIN);
            BREAK;
        CASE(eAA_AUDIOEVENT_GAIN_TRANSIENT)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_GAIN_TRANSIENT, false);
            CLEARAUDIOFOCUSSTATE(eAS_GAIN_RELEASE);
            SETAUDIOFOCUSSTATE(eAS_GAIN_TRANSIENT);
            BREAK;
        CASE(eAA_AUDIOEVENT_GAIN_TRANSIENT_MAY_DUCK)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_GAIN_TRANSIENT_GUIDANCE_ONLY, false);
            CLEARAUDIOFOCUSSTATE(eAS_GAIN_RELEASE);
            SETAUDIOFOCUSSTATE(eAS_GAIN_TRANSIENT_MAY_DUCK);
            BREAK;
        CASE(eAA_AUDIOEVENT_VOICESESSION_START)
            CLEARAUDIOFOCUSSTATE(eAS_GAIN_RELEASE);
            SETAUDIOFOCUSSTATE(eAS_VR);
            BREAK;
        CASE(eAA_AUDIOEVENT_CALL_ON)
            CLEARAUDIOFOCUSSTATE(eAS_GAIN_RELEASE);
            SETAUDIOFOCUSSTATE(eAS_CALL);
            BREAK;
        CASE(eAA_AUDIOEVENT_DISCONNECTED)
            CLEARAUDIOFOCUSSTATE(eAS_GAIN_RELEASE);
            BREAK;
        CASE(eAA_AUDIOEVENT_NATIVE_TRANSIENT_ON)
            CLEARAUDIOFOCUSSTATE(eAS_GAIN_RELEASE);
            SETAUDIOFOCUSSTATE(eAS_NATIVE_TRANSIENT);
            BREAK;
        CASE(eAA_AUDIOEVENT_NATIVE_TRANSIENT_MAY_DUCK_ON)
            CLEARAUDIOFOCUSSTATE(eAS_GAIN_RELEASE);
            SETAUDIOFOCUSSTATE(eAS_NATIVE_TRANSIENT_MAY_DUCK);
            BREAK;
        CASE(eAA_AUDIOEVENT_NATIVE_GAIN)
            // UIPRINT(UILog))AAP, "do not update AuF state since it has already been lost");
            //SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS, false);
            CLEARAUDIOFOCUSSTATE(eAS_GAIN_RELEASE);
            BREAK;
        default: 
            // printAudioState(event);
            BREAK;
        }
        BREAK;
    CASE2(eAS_GAIN|eAS_VR)
        switch (event) {
        CASE(eAA_AUDIOEVENT_RELEASE)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS, false);
            CLEARAUDIOFOCUSSTATE(eAS_GAIN);
            BREAK;
        CASE(eAA_AUDIOEVENT_VOICESESSION_END)
            CLEARAUDIOFOCUSSTATE(eAS_VR);
            BREAK;
        CASE(eAA_AUDIOEVENT_DISCONNECTED)
            CLEARAUDIOFOCUSSTATE(eAS_GAIN|eAS_VR);
            BREAK;
        CASE(eAA_AUDIOEVENT_CALL_ON)
#ifdef CONFIG_ALLOW_NAVI_GUIDANCE_DURING_CALL
#else
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS_TRANSIENT, true);
#endif
            CLEARAUDIOFOCUSSTATE(eAS_VR);
            SETAUDIOFOCUSSTATE(eAS_CALL);
            BREAK;
        CASE(eAA_AUDIOEVENT_NATIVE_TRANSIENT_ON)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS_TRANSIENT, true);
            SETAUDIOFOCUSSTATE(eAS_NATIVE_TRANSIENT);
            BREAK;
        CASE(eAA_AUDIOEVENT_NATIVE_TRANSIENT_MAY_DUCK_ON)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS_TRANSIENT_CAN_DUCK, true);
            SETAUDIOFOCUSSTATE(eAS_NATIVE_TRANSIENT_MAY_DUCK);
            BREAK;
        default: 
            // printAudioState(event);
            BREAK;
        }
        BREAK;
    CASE2(eAS_GAIN|eAS_VR|eAS_NATIVE_TRANSIENT)
        switch(event)
        {
        CASE(eAA_AUDIOEVENT_GAIN)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS_TRANSIENT, false);
            BREAK;
        CASE(eAA_AUDIOEVENT_GAIN_TRANSIENT)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS_TRANSIENT, false);
            BREAK;
        CASE(eAA_AUDIOEVENT_GAIN_TRANSIENT_MAY_DUCK)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS_TRANSIENT, false);
            BREAK;
        CASE(eAA_AUDIOEVENT_RELEASE)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS, false);
            CLEARAUDIOFOCUSSTATE(eAS_GAIN);
            BREAK;
        CASE(eAA_AUDIOEVENT_VOICESESSION_END)
            CLEARAUDIOFOCUSSTATE(eAS_VR);
            BREAK;
        CASE(eAA_AUDIOEVENT_DISCONNECTED)
            CLEARAUDIOFOCUSSTATE(eAS_GAIN|eAS_VR);
            BREAK;
        CASE(eAA_AUDIOEVENT_NATIVE_TRANSIENT_OFF)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_GAIN, true);
            CLEARAUDIOFOCUSSTATE(eAS_NATIVE_TRANSIENT);
            BREAK;
        default: 
            BREAK;
        }
        BREAK;
    CASE2(eAS_GAIN|eAS_VR|eAS_NATIVE_TRANSIENT_MAY_DUCK)
        switch(event)
        {
        CASE(eAA_AUDIOEVENT_RELEASE)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS, false);
            CLEARAUDIOFOCUSSTATE(eAS_GAIN);
            BREAK;
        CASE(eAA_AUDIOEVENT_VOICESESSION_END)
            CLEARAUDIOFOCUSSTATE(eAS_VR);
            BREAK;
        CASE(eAA_AUDIOEVENT_DISCONNECTED)
            CLEARAUDIOFOCUSSTATE(eAS_GAIN|eAS_VR);
            BREAK;
        CASE(eAA_AUDIOEVENT_NATIVE_TRANSIENT_MAY_DUCK_OFF)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_GAIN, true);
            CLEARAUDIOFOCUSSTATE(eAS_NATIVE_TRANSIENT_MAY_DUCK);
            BREAK;
        default: 
            // printAudioState(event);
            BREAK;
        }
        BREAK;
    CASE2(eAS_GAIN|eAS_CALL)
        switch(event)
        {
        CASE(eAA_AUDIOEVENT_GAIN)
        CASE(eAA_AUDIOEVENT_GAIN_TRANSIENT)
        CASE(eAA_AUDIOEVENT_GAIN_TRANSIENT_MAY_DUCK)
#ifdef CONFIG_ALLOW_NAVI_GUIDANCE_DURING_CALL
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_GAIN, false);
#else
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS_TRANSIENT, false);
#endif
            BREAK;
        CASE(eAA_AUDIOEVENT_RELEASE)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS, false);
            CLEARAUDIOFOCUSSTATE(eAS_GAIN);
            BREAK;
        CASE(eAA_AUDIOEVENT_CALL_OFF)
#ifdef CONFIG_ALLOW_NAVI_GUIDANCE_DURING_CALL
#else
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_GAIN, true);
#endif
            CLEARAUDIOFOCUSSTATE(eAS_CALL);
            BREAK;
        CASE(eAA_AUDIOEVENT_DISCONNECTED)
            CLEARAUDIOFOCUSSTATE(eAS_GAIN);
            BREAK;
        CASE(eAA_AUDIOEVENT_NATIVE_TRANSIENT_ON)
#ifdef CONFIG_ALLOW_NAVI_GUIDANCE_DURING_CALL
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS_TRANSIENT, false);
#endif
            SETAUDIOFOCUSSTATE(eAS_NATIVE_TRANSIENT);
            BREAK;
        CASE(eAA_AUDIOEVENT_NATIVE_TRANSIENT_MAY_DUCK_ON)
            //SETAUDIOFOCUSSTATE(eAS_NATIVE_TRANSIENT_MAY_DUCK);
            BREAK;
        default: 
            // printAudioState(event);
            BREAK;
        }
        BREAK;
    CASE2(eAS_GAIN|eAS_CALL|eAS_NATIVE_TRANSIENT)
        switch(event)
        {
        CASE(eAA_AUDIOEVENT_GAIN)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS_TRANSIENT, false);
            BREAK;
        CASE(eAA_AUDIOEVENT_GAIN_TRANSIENT)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS_TRANSIENT, false);
            BREAK;
        CASE(eAA_AUDIOEVENT_GAIN_TRANSIENT_MAY_DUCK)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS_TRANSIENT, false);
            BREAK;
        CASE(eAA_AUDIOEVENT_CALL_OFF)
            CLEARAUDIOFOCUSSTATE(eAS_CALL);
            BREAK;
        CASE(eAA_AUDIOEVENT_DISCONNECTED)
            CLEARAUDIOFOCUSSTATE(eAS_GAIN);
            BREAK;
        CASE(eAA_AUDIOEVENT_NATIVE_TRANSIENT_OFF)
#ifdef CONFIG_ALLOW_NAVI_GUIDANCE_DURING_CALL
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_GAIN, true);
#else
#endif
            CLEARAUDIOFOCUSSTATE(eAS_NATIVE_TRANSIENT);
            BREAK;
        default: 
            BREAK;
        }
        BREAK;
    CASE2(eAS_GAIN|eAS_CALL|eAS_NATIVE_TRANSIENT_MAY_DUCK)
        switch(event)
        {
        CASE(eAA_AUDIOEVENT_GAIN)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS_TRANSIENT, false);
            BREAK;
        CASE(eAA_AUDIOEVENT_GAIN_TRANSIENT)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS_TRANSIENT, false);
            BREAK;
        CASE(eAA_AUDIOEVENT_GAIN_TRANSIENT_MAY_DUCK)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS_TRANSIENT, false);
            BREAK;
        CASE(eAA_AUDIOEVENT_CALL_OFF)
            CLEARAUDIOFOCUSSTATE(eAS_CALL);
            BREAK;
        CASE(eAA_AUDIOEVENT_DISCONNECTED)
            CLEARAUDIOFOCUSSTATE(eAS_GAIN);
            BREAK;
        CASE(eAA_AUDIOEVENT_NATIVE_TRANSIENT_MAY_DUCK_OFF)
            CLEARAUDIOFOCUSSTATE(eAS_NATIVE_TRANSIENT_MAY_DUCK);
            BREAK;
        default: 
            BREAK;
        }

        BREAK;
    CASE2(eAS_GAIN_TRANSIENT)
        switch(event)
        {
        CASE(eAA_AUDIOEVENT_GAIN)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_GAIN, false);
            CLEARAUDIOFOCUSSTATE(eAS_GAIN_TRANSIENT);
            SETAUDIOFOCUSSTATE(eAS_GAIN);
            BREAK;
        CASE(eAA_AUDIOEVENT_RELEASE)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS, false);
            CLEARAUDIOFOCUSSTATE(eAS_GAIN_TRANSIENT);
            BREAK;
        CASE(eAA_AUDIOEVENT_VOICESESSION_START)
            SETAUDIOFOCUSSTATE(eAS_VR);
            BREAK;
        CASE(eAA_AUDIOEVENT_CALL_ON)
#ifdef CONFIG_ALLOW_NAVI_GUIDANCE_DURING_CALL
#else
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS_TRANSIENT, true);
            CLEARAUDIOFOCUSSTATE(eAS_GAIN_TRANSIENT);
#endif
            SETAUDIOFOCUSSTATE(eAS_CALL);
            BREAK;
        CASE(eAA_AUDIOEVENT_DISCONNECTED)
            CLEARAUDIOFOCUSSTATE(eAS_GAIN_TRANSIENT);
            BREAK;
        CASE(eAA_AUDIOEVENT_NATIVE_TRANSIENT_ON)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS_TRANSIENT, true);
            CLEARAUDIOFOCUSSTATE(eAS_GAIN_TRANSIENT);
            SETAUDIOFOCUSSTATE(eAS_NATIVE_TRANSIENT);
            BREAK;
        CASE(eAA_AUDIOEVENT_NATIVE_TRANSIENT_MAY_DUCK_ON)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS_TRANSIENT, true);
            CLEARAUDIOFOCUSSTATE(eAS_GAIN_TRANSIENT);
            SETAUDIOFOCUSSTATE(eAS_NATIVE_TRANSIENT_MAY_DUCK);
            BREAK;
        CASE(eAA_AUDIOEVENT_NATIVE_GAIN)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS, true);
            CLEARAUDIOFOCUSSTATE(eAS_GAIN_TRANSIENT);
            BREAK;
        default: 
            // printAudioState(event);
            BREAK;
        }
        BREAK;
    CASE2(eAS_GAIN_TRANSIENT|eAS_VR)
        switch(event)
        {
        CASE(eAA_AUDIOEVENT_GAIN)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_GAIN, false);
            CLEARAUDIOFOCUSSTATE(eAS_GAIN_TRANSIENT);
            SETAUDIOFOCUSSTATE(eAS_GAIN);
            BREAK;
        CASE(eAA_AUDIOEVENT_RELEASE)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS, false);
            CLEARAUDIOFOCUSSTATE(eAS_GAIN_TRANSIENT);
            BREAK;
        CASE(eAA_AUDIOEVENT_VOICESESSION_END)
            CLEARAUDIOFOCUSSTATE(eAS_VR);
            BREAK;
        CASE(eAA_AUDIOEVENT_CALL_ON)
#ifdef CONFIG_ALLOW_NAVI_GUIDANCE_DURING_CALL
#else
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS_TRANSIENT, true);
            CLEARAUDIOFOCUSSTATE(eAS_GAIN_TRANSIENT);
#endif
            CLEARAUDIOFOCUSSTATE(eAS_VR);
            SETAUDIOFOCUSSTATE(eAS_CALL);
            BREAK;
        CASE(eAA_AUDIOEVENT_DISCONNECTED)
            CLEARAUDIOFOCUSSTATE(eAS_GAIN_TRANSIENT|eAS_VR);
            BREAK;
        CASE(eAA_AUDIOEVENT_NATIVE_TRANSIENT_ON)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS_TRANSIENT, true);
            CLEARAUDIOFOCUSSTATE(eAS_GAIN_TRANSIENT);
            SETAUDIOFOCUSSTATE(eAS_NATIVE_TRANSIENT);
            BREAK;
        CASE(eAA_AUDIOEVENT_NATIVE_TRANSIENT_MAY_DUCK_ON)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS_TRANSIENT, true);
            CLEARAUDIOFOCUSSTATE(eAS_GAIN_TRANSIENT);
            SETAUDIOFOCUSSTATE(eAS_NATIVE_TRANSIENT_MAY_DUCK);
            BREAK;
        default: 
            // printAudioState(event);
            BREAK;
        }
        BREAK;
    CASE2(eAS_GAIN_TRANSIENT|eAS_CALL)
        switch(event)
        {
        CASE(eAA_AUDIOEVENT_GAIN)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_GAIN, false);
            CLEARAUDIOFOCUSSTATE(eAS_GAIN_TRANSIENT);
            SETAUDIOFOCUSSTATE(eAS_GAIN);
            BREAK;
        CASE(eAA_AUDIOEVENT_GAIN_TRANSIENT)
        CASE(eAA_AUDIOEVENT_GAIN_TRANSIENT_MAY_DUCK)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_GAIN_TRANSIENT, false);
            BREAK;
        CASE(eAA_AUDIOEVENT_RELEASE)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS, false);
            CLEARAUDIOFOCUSSTATE(eAS_GAIN_TRANSIENT);
            BREAK;
        CASE(eAA_AUDIOEVENT_CALL_OFF)
            CLEARAUDIOFOCUSSTATE(eAS_CALL);
            BREAK;
        CASE(eAA_AUDIOEVENT_DISCONNECTED)
            CLEARAUDIOFOCUSSTATE(eAS_GAIN_TRANSIENT);
            BREAK;
        CASE(eAA_AUDIOEVENT_NATIVE_TRANSIENT_ON)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS_TRANSIENT, true);
            CLEARAUDIOFOCUSSTATE(eAS_GAIN_TRANSIENT);
            SETAUDIOFOCUSSTATE(eAS_NATIVE_TRANSIENT);
            BREAK;
        CASE(eAA_AUDIOEVENT_NATIVE_TRANSIENT_MAY_DUCK_ON)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS_TRANSIENT_CAN_DUCK, true);
            SETAUDIOFOCUSSTATE(eAS_NATIVE_TRANSIENT_MAY_DUCK);
            CLEARAUDIOFOCUSSTATE(eAS_GAIN_TRANSIENT);
            BREAK;
        default: 
            // printAudioState(event);
            BREAK;
        }
        BREAK;
    CASE2(eAS_GAIN_TRANSIENT_MAY_DUCK)
        switch(event)
        {
        CASE(eAA_AUDIOEVENT_GAIN)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_GAIN, false);
            CLEARAUDIOFOCUSSTATE(eAS_GAIN_TRANSIENT_MAY_DUCK);
            SETAUDIOFOCUSSTATE(eAS_GAIN);
            BREAK;
        CASE(eAA_AUDIOEVENT_GAIN_TRANSIENT)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_GAIN_TRANSIENT, false);
            CLEARAUDIOFOCUSSTATE(eAS_GAIN_TRANSIENT_MAY_DUCK);
            SETAUDIOFOCUSSTATE(eAS_GAIN_TRANSIENT);
            BREAK;
        CASE(eAA_AUDIOEVENT_GAIN_TRANSIENT_MAY_DUCK)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_GAIN_TRANSIENT_GUIDANCE_ONLY, false);
            BREAK;
        CASE(eAA_AUDIOEVENT_RELEASE)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS, false);
            CLEARAUDIOFOCUSSTATE(eAS_GAIN_TRANSIENT_MAY_DUCK);
            BREAK;
        CASE(eAA_AUDIOEVENT_VOICESESSION_START)
            SETAUDIOFOCUSSTATE(eAS_VR);
            BREAK;
        CASE(eAA_AUDIOEVENT_CALL_ON)
#ifdef CONFIG_ALLOW_NAVI_GUIDANCE_DURING_CALL
#else
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS_TRANSIENT, true);
            CLEARAUDIOFOCUSSTATE(eAS_GAIN_TRANSIENT_MAY_DUCK);
#endif
            SETAUDIOFOCUSSTATE(eAS_CALL);
            BREAK;
        CASE(eAA_AUDIOEVENT_DISCONNECTED)
            CLEARAUDIOFOCUSSTATE(eAS_GAIN_TRANSIENT_MAY_DUCK);
            BREAK;
        CASE(eAA_AUDIOEVENT_NATIVE_TRANSIENT_ON)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS_TRANSIENT, true);
            CLEARAUDIOFOCUSSTATE(eAS_GAIN_TRANSIENT_MAY_DUCK);
            SETAUDIOFOCUSSTATE(eAS_NATIVE_TRANSIENT);
            BREAK;
        CASE(eAA_AUDIOEVENT_NATIVE_TRANSIENT_MAY_DUCK_ON)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS_TRANSIENT, true);
            CLEARAUDIOFOCUSSTATE(eAS_GAIN_TRANSIENT_MAY_DUCK);
            SETAUDIOFOCUSSTATE(eAS_NATIVE_TRANSIENT_MAY_DUCK);
            BREAK;
        default: 
            // printAudioState(event);
            BREAK;
        }
        BREAK;
    CASE2(eAS_GAIN_TRANSIENT_MAY_DUCK|eAS_VR)
        switch(event)
        {
        CASE(eAA_AUDIOEVENT_GAIN)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_GAIN, false);
            CLEARAUDIOFOCUSSTATE(eAS_GAIN_TRANSIENT_MAY_DUCK);
            SETAUDIOFOCUSSTATE(eAS_GAIN);
            BREAK;
        CASE(eAA_AUDIOEVENT_GAIN_TRANSIENT)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_GAIN_TRANSIENT, false);
            CLEARAUDIOFOCUSSTATE(eAS_GAIN_TRANSIENT_MAY_DUCK);
            SETAUDIOFOCUSSTATE(eAS_GAIN_TRANSIENT);
            BREAK;
        CASE(eAA_AUDIOEVENT_RELEASE)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS, false);
            CLEARAUDIOFOCUSSTATE(eAS_GAIN_TRANSIENT_MAY_DUCK);
            BREAK;
        CASE(eAA_AUDIOEVENT_VOICESESSION_END)
            CLEARAUDIOFOCUSSTATE(eAS_VR);
            BREAK;
        CASE(eAA_AUDIOEVENT_CALL_ON)
#ifdef CONFIG_ALLOW_NAVI_GUIDANCE_DURING_CALL
#else
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS_TRANSIENT, true);
            CLEARAUDIOFOCUSSTATE(eAS_GAIN_TRANSIENT_MAY_DUCK);
#endif
            CLEARAUDIOFOCUSSTATE(eAS_VR);
            SETAUDIOFOCUSSTATE(eAS_CALL);
            BREAK;
        CASE(eAA_AUDIOEVENT_DISCONNECTED)
            CLEARAUDIOFOCUSSTATE(eAS_GAIN_TRANSIENT_MAY_DUCK|eAS_VR);
            BREAK;
        CASE(eAA_AUDIOEVENT_NATIVE_TRANSIENT_ON)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS_TRANSIENT, true);
            CLEARAUDIOFOCUSSTATE(eAS_GAIN_TRANSIENT_MAY_DUCK);
            SETAUDIOFOCUSSTATE(eAS_NATIVE_TRANSIENT);
            BREAK;
        CASE(eAA_AUDIOEVENT_NATIVE_TRANSIENT_MAY_DUCK_ON)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS_TRANSIENT, true);
            CLEARAUDIOFOCUSSTATE(eAS_GAIN_TRANSIENT_MAY_DUCK);
            SETAUDIOFOCUSSTATE(eAS_NATIVE_TRANSIENT_MAY_DUCK);
            BREAK;
        default: 
            // printAudioState(event);
            BREAK;
        }
        BREAK;
    CASE2(eAS_GAIN_TRANSIENT_MAY_DUCK|eAS_CALL)
        switch(event)
        {
        CASE(eAA_AUDIOEVENT_GAIN)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_GAIN, false);
            CLEARAUDIOFOCUSSTATE(eAS_GAIN_TRANSIENT_MAY_DUCK);
            SETAUDIOFOCUSSTATE(eAS_GAIN);
            BREAK;
        CASE(eAA_AUDIOEVENT_GAIN_TRANSIENT)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_GAIN_TRANSIENT, false);
            CLEARAUDIOFOCUSSTATE(eAS_GAIN_TRANSIENT_MAY_DUCK);
            SETAUDIOFOCUSSTATE(eAS_GAIN_TRANSIENT);
            BREAK;
        CASE(eAA_AUDIOEVENT_GAIN_TRANSIENT_MAY_DUCK)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_GAIN_TRANSIENT_GUIDANCE_ONLY, false);
            BREAK;
        CASE(eAA_AUDIOEVENT_RELEASE)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS, false);
            CLEARAUDIOFOCUSSTATE(eAS_GAIN_TRANSIENT_MAY_DUCK);
            BREAK;
        CASE(eAA_AUDIOEVENT_CALL_OFF)
            CLEARAUDIOFOCUSSTATE(eAS_CALL);
            BREAK;
        CASE(eAA_AUDIOEVENT_DISCONNECTED)
            CLEARAUDIOFOCUSSTATE(eAS_GAIN_TRANSIENT_MAY_DUCK);
            BREAK;
        CASE(eAA_AUDIOEVENT_NATIVE_TRANSIENT_ON)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS_TRANSIENT, true);
            CLEARAUDIOFOCUSSTATE(eAS_GAIN_TRANSIENT_MAY_DUCK);
            SETAUDIOFOCUSSTATE(eAS_NATIVE_TRANSIENT);
            BREAK;
        CASE(eAA_AUDIOEVENT_NATIVE_TRANSIENT_MAY_DUCK_ON)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS_TRANSIENT_CAN_DUCK, true);
            CLEARAUDIOFOCUSSTATE(eAS_GAIN_TRANSIENT_MAY_DUCK);
            SETAUDIOFOCUSSTATE(eAS_NATIVE_TRANSIENT_MAY_DUCK);
            BREAK;
        default: 
            // printAudioState(event);
            BREAK;
        }
        BREAK;
    CASE2(eAS_VR)
        switch(event)
        {
        CASE(eAA_AUDIOEVENT_GAIN)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_GAIN, false);
            SETAUDIOFOCUSSTATE(eAS_GAIN);
            BREAK;
        CASE(eAA_AUDIOEVENT_GAIN_TRANSIENT)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_GAIN_TRANSIENT, false);
            SETAUDIOFOCUSSTATE(eAS_GAIN_TRANSIENT);
            BREAK;
        CASE(eAA_AUDIOEVENT_GAIN_TRANSIENT_MAY_DUCK)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_GAIN_TRANSIENT_GUIDANCE_ONLY, false);
            SETAUDIOFOCUSSTATE(eAS_GAIN_TRANSIENT_MAY_DUCK);
            BREAK;
        CASE(eAA_AUDIOEVENT_VOICESESSION_END)
            CLEARAUDIOFOCUSSTATE(eAS_VR);
            BREAK;
        CASE(eAA_AUDIOEVENT_DISCONNECTED)
            CLEARAUDIOFOCUSSTATE(eAS_VR);
            BREAK;
        CASE(eAA_AUDIOEVENT_NATIVE_TRANSIENT_ON)
            SETAUDIOFOCUSSTATE(eAS_NATIVE_TRANSIENT);
            BREAK;
        CASE(eAA_AUDIOEVENT_NATIVE_TRANSIENT_MAY_DUCK_ON)
            SETAUDIOFOCUSSTATE(eAS_NATIVE_TRANSIENT_MAY_DUCK);
            BREAK;
        default: 
            // printAudioState(event);
            BREAK;
        }
        BREAK;
    CASE2(eAS_VR|eAS_NATIVE_TRANSIENT)
        switch(event)
        {
        CASE(eAA_AUDIOEVENT_GAIN)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS_TRANSIENT, false);
            BREAK;
        CASE(eAA_AUDIOEVENT_GAIN_TRANSIENT)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS_TRANSIENT, false);
            BREAK;
        CASE(eAA_AUDIOEVENT_GAIN_TRANSIENT_MAY_DUCK)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS_TRANSIENT, false);
            BREAK;
        CASE(eAA_AUDIOEVENT_VOICESESSION_END)
            CLEARAUDIOFOCUSSTATE(eAS_VR);
            BREAK;
        CASE(eAA_AUDIOEVENT_DISCONNECTED)
            CLEARAUDIOFOCUSSTATE(eAS_VR);
            BREAK;
        CASE(eAA_AUDIOEVENT_NATIVE_TRANSIENT_OFF)
            CLEARAUDIOFOCUSSTATE(eAS_NATIVE_TRANSIENT);
            BREAK;
        default: 
            BREAK;
        }
        BREAK;
    CASE2(eAS_VR|eAS_NATIVE_TRANSIENT_MAY_DUCK)
        switch(event)
        {
        CASE(eAA_AUDIOEVENT_GAIN)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS_TRANSIENT_CAN_DUCK, false);
            SETAUDIOFOCUSSTATE(eAS_GAIN);
            BREAK;
        CASE(eAA_AUDIOEVENT_GAIN_TRANSIENT)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS_TRANSIENT, false);
            BREAK;
        CASE(eAA_AUDIOEVENT_GAIN_TRANSIENT_MAY_DUCK)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS_TRANSIENT, false);
            BREAK;
        CASE(eAA_AUDIOEVENT_VOICESESSION_END)
            CLEARAUDIOFOCUSSTATE(eAS_VR);
            BREAK;
        CASE(eAA_AUDIOEVENT_DISCONNECTED)
            CLEARAUDIOFOCUSSTATE(eAS_VR);
            BREAK;
        CASE(eAA_AUDIOEVENT_NATIVE_TRANSIENT_MAY_DUCK_OFF)
            CLEARAUDIOFOCUSSTATE(eAS_NATIVE_TRANSIENT_MAY_DUCK);
            BREAK;
        default: 
            BREAK;
        }
        BREAK;
    CASE2(eAS_CALL)
        switch(event)
        {
        CASE(eAA_AUDIOEVENT_GAIN)
#ifdef CONFIG_ALLOW_NAVI_GUIDANCE_DURING_CALL
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_GAIN, false);
            SETAUDIOFOCUSSTATE(eAS_GAIN);
#else
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS_TRANSIENT, false);
#endif
            BREAK;
        CASE(eAA_AUDIOEVENT_GAIN_TRANSIENT)
#ifdef CONFIG_ALLOW_NAVI_GUIDANCE_DURING_CALL
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_GAIN_TRANSIENT, false);
            SETAUDIOFOCUSSTATE(eAS_GAIN_TRANSIENT);
#else
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS_TRANSIENT, false);
#endif
            BREAK;
        CASE(eAA_AUDIOEVENT_GAIN_TRANSIENT_MAY_DUCK)
#ifdef CONFIG_ALLOW_NAVI_GUIDANCE_DURING_CALL
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_GAIN_TRANSIENT_GUIDANCE_ONLY, false);
            SETAUDIOFOCUSSTATE(eAS_GAIN_TRANSIENT_MAY_DUCK);
#else
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS_TRANSIENT, false);
#endif
            BREAK;
        CASE(eAA_AUDIOEVENT_CALL_OFF)
            CLEARAUDIOFOCUSSTATE(eAS_CALL);
            BREAK;
        CASE(eAA_AUDIOEVENT_NATIVE_TRANSIENT_ON)
            SETAUDIOFOCUSSTATE(eAS_NATIVE_TRANSIENT);
            BREAK;
        CASE(eAA_AUDIOEVENT_NATIVE_TRANSIENT_MAY_DUCK_ON)
            //SETAUDIOFOCUSSTATE(eAS_NATIVE_TRANSIENT_MAY_DUCK);
            BREAK;
        default: 
            // printAudioState(event);
            BREAK;
        }
        BREAK;
    CASE2(eAS_CALL|eAS_NATIVE_TRANSIENT)
        switch(event)
        {
        CASE(eAA_AUDIOEVENT_GAIN)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS_TRANSIENT, false);
            BREAK;
        CASE(eAA_AUDIOEVENT_GAIN_TRANSIENT)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS_TRANSIENT, false);
            BREAK;
        CASE(eAA_AUDIOEVENT_GAIN_TRANSIENT_MAY_DUCK)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS_TRANSIENT, false);
            BREAK;
        CASE(eAA_AUDIOEVENT_CALL_OFF)
            CLEARAUDIOFOCUSSTATE(eAS_CALL);
            BREAK;
        CASE(eAA_AUDIOEVENT_NATIVE_TRANSIENT_OFF)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS, true);
            CLEARAUDIOFOCUSSTATE(eAS_NATIVE_TRANSIENT);
            BREAK;
        default: 
            BREAK;
        }
        BREAK;
    CASE2(eAS_CALL|eAS_NATIVE_TRANSIENT_MAY_DUCK)
        switch(event)
        {
        CASE(eAA_AUDIOEVENT_GAIN)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS_TRANSIENT, false);
            BREAK;
        CASE(eAA_AUDIOEVENT_GAIN_TRANSIENT)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS_TRANSIENT, false);
            BREAK;
        CASE(eAA_AUDIOEVENT_GAIN_TRANSIENT_MAY_DUCK)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS_TRANSIENT, false);
            BREAK;
        CASE(eAA_AUDIOEVENT_CALL_OFF)
            CLEARAUDIOFOCUSSTATE(eAS_CALL);
            BREAK;
        CASE(eAA_AUDIOEVENT_NATIVE_TRANSIENT_MAY_DUCK_OFF)
            SIGSENDAUDIOFOCUSSTATE(eAA_AUDIOFOCUSSTATE_LOSS, true);
            CLEARAUDIOFOCUSSTATE(eAS_NATIVE_TRANSIENT_MAY_DUCK);
            BREAK;
        default: 
            BREAK;
        }
        BREAK;
    }

    if (isGainRelease)
    {
        mAudioFocusState |= eAS_GAIN_RELEASE;
    }
}


// Start refactor
// void changeAudioFocus2(AA_AUDIOEVENT_e event)
// {
// 	map<pair<int,AA_AUDIOEVENT_e>, vector<int>> AndroidAutoTable;
// 	AA_AUDIO_TABLE(AndroidAutoTable, eAS_NONE, eAA_AUDIOEVENT_GAIN,                          eAA_AUDIOFOCUSSTATE_GAIN, false, eAS_GAIN, eAS_GAIN, eAS_NONE);
// 	AA_AUDIO_TABLE(AndroidAutoTable, eAS_NONE, eAA_AUDIOEVENT_GAIN_TRANSIENT,                eAA_AUDIOFOCUSSTATE_GAIN, false, eAS_GAIN, eAS_GAIN, eAS_NONE);
// 	AA_AUDIO_TABLE(AndroidAutoTable, eAS_NONE, eAA_AUDIOEVENT_GAIN_TRANSIENT_MAY_DUCK,       eAA_AUDIOFOCUSSTATE_GAIN, false, eAS_GAIN, eAS_GAIN, eAS_NONE);
// 	AA_AUDIO_TABLE(AndroidAutoTable, eAS_NONE, eAA_AUDIOEVENT_VOICESESSION_START,            eAA_AUDIOFOCUSSTATE_GAIN, false, eAS_GAIN, eAS_GAIN, eAS_NONE);
// 	AA_AUDIO_TABLE(AndroidAutoTable, eAS_NONE, eAA_AUDIOEVENT_CALL_ON,                       eAA_AUDIOFOCUSSTATE_GAIN, false, eAS_GAIN, eAS_GAIN, eAS_NONE);
// 	AA_AUDIO_TABLE(AndroidAutoTable, eAS_NONE, eAA_AUDIOEVENT_DISCONNECTED,                  eAA_AUDIOFOCUSSTATE_GAIN, false, eAS_GAIN, eAS_GAIN, eAS_NONE);
// 	AA_AUDIO_TABLE(AndroidAutoTable, eAS_NONE, eAA_AUDIOEVENT_NATIVE_TRANSIENT_ON,           eAA_AUDIOFOCUSSTATE_GAIN, false, eAS_GAIN, eAS_GAIN, eAS_NONE);
// 	AA_AUDIO_TABLE(AndroidAutoTable, eAS_NONE, eAA_AUDIOEVENT_NATIVE_TRANSIENT_MAY_DUCK_ON,  eAA_AUDIOFOCUSSTATE_GAIN, false, eAS_GAIN, eAS_GAIN, eAS_NONE);
// 	AA_AUDIO_TABLE(AndroidAutoTable, eAS_NONE, eAA_AUDIOEVENT_RELEASE,                       eAA_AUDIOFOCUSSTATE_GAIN, false, eAS_GAIN, eAS_GAIN, eAS_NONE);
// 	// Set
// 	// Clear

// 	return;
// }

int main()
{
	vector<AA_AUDIOEVENT_e> e = { 
		eAA_AUDIOEVENT_GAIN, 
		eAA_AUDIOEVENT_GAIN_TRANSIENT, 
		eAA_AUDIOEVENT_GAIN_TRANSIENT_MAY_DUCK, 
		eAA_AUDIOEVENT_RELEASE, 
		eAA_AUDIOEVENT_VOICESESSION_START, 
		eAA_AUDIOEVENT_VOICESESSION_END, 
		eAA_AUDIOEVENT_CALL_ON, 
		eAA_AUDIOEVENT_CALL_OFF, 
		eAA_AUDIOEVENT_DISCONNECTED, 
		eAA_AUDIOEVENT_NATIVE_TRANSIENT_ON, 
		eAA_AUDIOEVENT_NATIVE_TRANSIENT_OFF, 
		eAA_AUDIOEVENT_NATIVE_TRANSIENT_MAY_DUCK_ON, 
		eAA_AUDIOEVENT_NATIVE_TRANSIENT_MAY_DUCK_OFF, 
		eAA_AUDIOEVENT_NATIVE_GAIN, eAA_AUDIOEVENT_MEDIA_ON, 
		eAA_AUDIOEVENT_MEDIA_OFF, 
		eAA_AUDIOEVENT_GUIDANCE_ON, 
		eAA_AUDIOEVENT_GUIDANCE_OFF, 
		eAA_AUDIOEVENT_UI_ON, 
		eAA_AUDIOEVENT_UI_OFF
	};
	vector<int> mAu = {
		/*01*/(int)(eAS_NONE),
		/*02*/(int)(eAS_NATIVE_TRANSIENT),
		/*03*/(int)(eAS_NATIVE_TRANSIENT_MAY_DUCK),
		/*04*/(int)(eAS_GAIN),
		/*05*/(int)(eAS_GAIN|eAS_NATIVE_TRANSIENT),
		/*06*/(int)(eAS_GAIN|eAS_NATIVE_TRANSIENT_MAY_DUCK),
		/*07*/(int)(eAS_GAIN_RELEASE),
		/*08*/(int)(eAS_GAIN|eAS_VR),
		/*09*/(int)(eAS_GAIN|eAS_VR|eAS_NATIVE_TRANSIENT),
		/*10*/(int)(eAS_GAIN|eAS_VR|eAS_NATIVE_TRANSIENT_MAY_DUCK),
		/*11*/(int)(eAS_GAIN|eAS_CALL),
		/*12*/(int)(eAS_GAIN|eAS_CALL|eAS_NATIVE_TRANSIENT),
		/*13*/(int)(eAS_GAIN|eAS_CALL|eAS_NATIVE_TRANSIENT_MAY_DUCK),
		/*14*/(int)(eAS_GAIN_TRANSIENT),
		/*15*/(int)(eAS_GAIN_TRANSIENT|eAS_VR),
		/*16*/(int)(eAS_GAIN_TRANSIENT|eAS_CALL),
		/*17*/(int)(eAS_GAIN_TRANSIENT_MAY_DUCK),
		/*18*/(int)(eAS_GAIN_TRANSIENT_MAY_DUCK|eAS_VR),
		/*19*/(int)(eAS_GAIN_TRANSIENT_MAY_DUCK|eAS_CALL),
		/*20*/(int)(eAS_VR),
		/*21*/(int)(eAS_VR|eAS_NATIVE_TRANSIENT),
		/*22*/(int)(eAS_VR|eAS_NATIVE_TRANSIENT_MAY_DUCK),
		/*23*/(int)(eAS_CALL),
		/*24*/(int)(eAS_CALL|eAS_NATIVE_TRANSIENT),
		/*25*/(int)(eAS_CALL|eAS_NATIVE_TRANSIENT_MAY_DUCK),
		// /*26*/(int)(eAS_AUDIOFOCUS_REQUEST),
		// /*27*/(int)(eAS_AUDIOFOCUS_ETC),
		// /*28*/(int)(eAS_AUDIOFOCUS)
	};
	int cnt = 1;
	for(int i: mAu)
	{
		printf("\n// Case %02d (%02d)-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n",cnt,i);
		for(AA_AUDIOEVENT_e j: e)
		{
			mAudioFocusState = i;
			// RESET();
			changeAudioFocus(j);
			if(enu_bool) {printf("(%s,%s,%s,%s,%s,%s)\n", mAs, enu, sig, uso, stp, cls);}
		}
		++cnt;
	}
	return EXIT_SUCCESS;
}